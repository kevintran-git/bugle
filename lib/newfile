import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'auth.dart';

class AccountButton extends StatelessWidget {
  const AccountButton({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: Authentication().userChanges,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.active) {
          final user = snapshot.data;
          if (user != null && !user.isAnonymous) {
            // avatar of the user. if on click, display dialog
            return InkWell(
              onTap: () {
                Authentication().showSignOutDialog(context);
              },
              child: CircleAvatar(
                // placeholder if no photoURL
                backgroundImage: NetworkImage(user.providerData[0].photoURL ??
                    'https://via.placeholder.com/150'),
                radius: 16,
              ),
            );
          } else {
            return ElevatedButton.icon(
              onPressed: () async {
                await Authentication().signInOrLinkWithGoogle();
              },
              icon: const Icon(Icons.login, size: 16),
              label: const Text('Sign in'),
            );
          }
        } else {
          return const CircularProgressIndicator();
        }
      },
    );
  }
}
// auth.dart
import 'package:bugle/mock_user.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';

class Authentication {
  // Singleton
  static final Authentication _instance =
      Authentication._internal(); // creates singleton
  factory Authentication() =>
      _instance; // links every call to the constructor to the same instance
  Authentication._internal(); // private constructor

  // Change Client ID based on platform
  static const _clientIdIos =
      "1051480448383-pcckjs23itbn6b5cj9h60duu3vuelpfh.apps.googleusercontent.com";

  static const _clientIdWeb =
      "1051480448383-4b8ib2hq36ref08phpgbicqk2teletp5.apps.googleusercontent.com";

  static const _clientId = kIsWeb ? _clientIdWeb : _clientIdIos;

  // Firebase and Google Sign In objects
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;

  final GoogleSignIn googleSignIn = GoogleSignIn(
    // GoogleSignIn object, this is used for the Google Sign In flow and Calendar access
    scopes: [
      'email',
      'https://www.googleapis.com/auth/calendar.events.readonly',
    ],
    clientId: _clientId,
  );

  // Public getters for the current user and auth state
  User? get _currentUser => _firebaseAuth.currentUser;
  DocumentReference? get _currentUserRef =>
      FirebaseFirestore.instance.collection('users').doc(_currentUser?.uid);
  Stream<User?> get userChanges => _firebaseAuth.userChanges();

  Future<UserCredential?> signInAnonymously() async {
    try {
      UserCredential userCredential = await _firebaseAuth.signInAnonymously();
      if (kDebugMode) {
        initializeUserData(_currentUser!, _currentUserRef!);
      }
      return userCredential;
    } catch (e) {
      if (kDebugMode) {
        print('Error signing in anonymously: $e');
      }
      return null;
    }
  }

  Future<OAuthCredential?> authenticateWithGoogle() async {
    try {
      // Trigger the authentication flow
      final GoogleSignInAccount? googleUser = await googleSignIn.signIn();

      // Obtain the auth details from the request
      final GoogleSignInAuthentication? googleAuth =
          await googleUser?.authentication;

      // Create a new credential
      final OAuthCredential credential = GoogleAuthProvider.credential(
        accessToken: googleAuth?.accessToken,
        idToken: googleAuth?.idToken,
      );

      return credential;
    } catch (e) {
      if (kDebugMode) {
        print('Error authenticating with Google: $e');
      }
      return null;
    }
  }

  Future<void> signInOrLinkWithGoogle() async {
    final OAuthCredential? credential = await authenticateWithGoogle();

    try {
      if (credential == null) return;
      final currentUser = _firebaseAuth.currentUser;

      // If the user is anonymous, link the Google credential to the anonymous account
      if (currentUser != null && currentUser.isAnonymous) {
        await currentUser.linkWithCredential(credential);
        // Update the user info
      } else {
        // Otherwise, sign in with Google credential
        await _firebaseAuth.signInWithCredential(credential);
      }
    } on FirebaseAuthException catch (e) {
      switch (e.code) {
        case "credential-already-in-use":
          await deleteUser();
          // Sign in with Google credential
          await _firebaseAuth.signInWithCredential(credential!);
          break;
        // See the API reference for the full list of error codes.
        default:
          if (kDebugMode) {
            print(e);
          }
      }
    }
  }

  Future<void> deleteUser() async {
    // delete if the user is anonymous
    if (_currentUser?.isAnonymous ?? false) {
      var friends = _currentUserRef?.collection('friends');
      if(friends != null) { // delete all friends
        await friends.get().then((snapshot) {
          for (DocumentSnapshot ds in snapshot.docs) {
            ds.reference.delete();
          }
        });
      }
      await _currentUserRef?.delete(); // delete user data
      await _currentUser?.delete(); // delete user
    }
  }

  Future<void> signOut() async {
    try {
      await _firebaseAuth.signOut();
      await googleSignIn.signOut();
    } catch (e) {
      if (kDebugMode) {
        print('Error signing out: $e');
      }
    }
  }

  // Shows a Dialog to sign the user out. Displays the user's name, email, uid. Options are to cancel and sign out
  Future<void> showSignOutDialog(BuildContext context) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: true,
      builder: (BuildContext context) {
        final User? user = _currentUser;
        if (user == null) {
          return const AlertDialog(title: Text("No user signed in"));
        }
        return AlertDialog(
          title: Text(user.displayName ?? "Anonymous"),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                Text(user.email ?? "No email"),
                Text("Is anonymous: ${user.isAnonymous}"),
                // are they signed in using google
                Text(user.uid),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: const Text('Sign out'),
              onPressed: () async {
                await signOut();
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }
}
// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDVuOSVNarmLEYiMU3h9axenBQiEO1YtKA',
    appId: '1:1051480448383:web:7626a9d86b555981790e4a',
    messagingSenderId: '1051480448383',
    projectId: 'fir-flutter-codelab-ffb06',
    authDomain: 'fir-flutter-codelab-ffb06.firebaseapp.com',
    storageBucket: 'fir-flutter-codelab-ffb06.appspot.com',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCiAbLODntYFNzsrs1c6L89frh-PgucpLQ',
    appId: '1:1051480448383:android:d4f50daab0df876b790e4a',
    messagingSenderId: '1051480448383',
    projectId: 'fir-flutter-codelab-ffb06',
    storageBucket: 'fir-flutter-codelab-ffb06.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyAr-MiXcYfJ8tosu6C6GGkG2Mck5Sanq-0',
    appId: '1:1051480448383:ios:0d14f7fdc0ecd3a8790e4a',
    messagingSenderId: '1051480448383',
    projectId: 'fir-flutter-codelab-ffb06',
    storageBucket: 'fir-flutter-codelab-ffb06.appspot.com',
    iosClientId: '1051480448383-pcckjs23itbn6b5cj9h60duu3vuelpfh.apps.googleusercontent.com',
    iosBundleId: 'com.example.bugle',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyAr-MiXcYfJ8tosu6C6GGkG2Mck5Sanq-0',
    appId: '1:1051480448383:ios:0d14f7fdc0ecd3a8790e4a',
    messagingSenderId: '1051480448383',
    projectId: 'fir-flutter-codelab-ffb06',
    storageBucket: 'fir-flutter-codelab-ffb06.appspot.com',
    iosClientId: '1051480448383-pcckjs23itbn6b5cj9h60duu3vuelpfh.apps.googleusercontent.com',
    iosBundleId: 'com.example.bugle',
  );
}
// stateful widget
import 'package:bugle/auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'models/friend.dart';

class FriendsList extends StatelessWidget {
  const FriendsList({Key? key}) : super(key: key);

  // build the list of friends
  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: Authentication().userChanges,
      builder: (context, authSnapshot) {
        if (authSnapshot.connectionState == ConnectionState.active) {
          if (authSnapshot.hasData) {
            final userRef = FirebaseFirestore.instance
                .collection('users')
                .doc(authSnapshot.data!.uid);
            return friendsListStreamListener(userRef);
          } else {
            return const Center(child: Text('Please sign in'));
          }
        } else {
          return const CircularProgressIndicator();
        }
      },
    );
  }

  StreamBuilder<QuerySnapshot<Object?>> friendsListStreamListener(
      DocumentReference userRef) {
    return StreamBuilder<QuerySnapshot>(
      stream: userRef.collection('friends').snapshots(),
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          List<QueryDocumentSnapshot> friends = snapshot.data!.docs;
          return friendsListBuilder(friends);
        } else {
          return const CircularProgressIndicator();
        }
      },
    );
  }

  ListView friendsListBuilder(List<QueryDocumentSnapshot<Object?>> friends) {
    return ListView.builder(
      itemCount: friends.length,
      itemBuilder: (context, index) {
        Friend friend =
            Friend.fromMap(friends[index].data() as Map<String, dynamic>);
        return ListTile(
          leading: CircleAvatar(
            // check if the profilePictureUrl is null
            backgroundImage: friend.profilePictureUrl != ""
                ? NetworkImage(friend.profilePictureUrl)
                : null,
            // first letter of the name
            child: Text(friend.name[0]),
          ),
          title: Text(friend.name,
              style: const TextStyle(fontWeight: FontWeight.w400)),
          // thinner text. truncate to fit on one line
          subtitle: Text(
            friend.status,
            style: const TextStyle(fontWeight: FontWeight.w300),
            overflow: TextOverflow.ellipsis,
          ),
          // onclick
          onTap: () {
            _showFriendInfoDialog(friend, context);
          },
        );
      },
    );
  }

  // end build
  void _showFriendInfoDialog(Friend friend, BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(friend.name),
          content: Text(friend.status),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('Close'),
            ),
          ],
        );
      },
    );
  }
}
import 'dart:async';

import 'package:bugle/auth.dart';
import 'package:bugle/friends_list.dart';
import 'package:bugle/search_bar.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'responsive_navigation_layout.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // sign in anonymously only if not already signed in then run app
  if (FirebaseAuth.instance.currentUser == null) {
    await Authentication().signInAnonymously();
  }

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    const seedColor = Colors.blueAccent;
    // Define the navigation items for the responsive navigation layout.
    // Each item contains an icon, a selected icon, a title, and a screen to navigate to.
    const List<ResponsiveNavigationDestination> destinations =
        <ResponsiveNavigationDestination>[
      ResponsiveNavigationDestination(
        icon: Icon(Icons.chat_bubble_outline),
        selectedIcon: Icon(Icons.chat_bubble),
        title: 'Schedule',
        screen: FloatingSearchBar(child: FriendsList()),
      ),
      ResponsiveNavigationDestination(
        icon: Icon(Icons.people_outline),
        selectedIcon: Icon(Icons.people),
        title: 'Groups',
        screen: MyHomePage(title: 'Groups'),
      ),
      ResponsiveNavigationDestination(
        icon: Icon(Icons.calendar_month_rounded),
        selectedIcon: Icon(Icons.calendar_month),
        title: 'Availability',
        screen: MyHomePage(title: 'Availability'),
      ),
    ];

// This code creates a Material 3 theme and a bottom navigation bar.
// It also creates a ChangeNotifierProvider and a Consumer for app state.
// The app state object is used to track which navigation item is selected.
    return ChangeNotifierProvider(
      create: (context) => MyAppState(),
      child: MaterialApp(
        title: 'Bugle',
        debugShowCheckedModeBanner: false, // Remove debug banner
        theme: ThemeData(
          useMaterial3: true, // Enable Material 3 theme
          colorScheme: ColorScheme.fromSeed(
              seedColor: seedColor, brightness: Brightness.light),
        ),
        darkTheme: ThemeData(
          useMaterial3: true, // Enable Material 3 theme
          colorScheme: ColorScheme.fromSeed(
              seedColor: seedColor, brightness: Brightness.dark),
        ),
        themeMode: ThemeMode.system, // Follow system theme
        home: Consumer<MyAppState>(
          // Use a Consumer to access app state
          builder: (context, appState, child) {
            // The builder rebuilds the layout when notifyListeners() is called
            return ResponsiveNavigationLayout(
              selectedIndex: appState.selectedIndex,
              destinations: destinations,
              onItemSelected: appState.onItemSelected,
            );
          },
        ),
      ),
    );
  }
}

/// This is the main application class.
/// This class is used to control the state of the application.
class MyAppState extends ChangeNotifier {
  int _selectedIndex =
      0; // This is the current selected index in the navigation bar.

  int get selectedIndex =>
      _selectedIndex; // This getter is used to access the current selected index.

  void onItemSelected(int index) {
    // This method is called when a navigation item is selected.
    _selectedIndex = index;
    notifyListeners(); // This notifies the listeners, which will rebuild the layout.
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // if the user exists, load the user's counter value from Firestore. Otherwise, set the counter value to 0.
  int _counter = 0;

  // create a document reference for the user
  DocumentReference userRef = FirebaseFirestore.instance
      .collection('users')
      .doc(FirebaseAuth.instance.currentUser?.uid);
  late StreamSubscription<DocumentSnapshot> userSub;

  // listen to the user document stream in initState
  @override
  void initState() {
    super.initState();
    userSub = userRef.snapshots().listen(
      // handle data event
      (doc) {
        if (doc.exists) {
          setState(() {
            _counter = (doc.data() as Map<String, dynamic>)['counter'] ?? 0;
          });
        }
      },
      // handle error event
      onError: (error) {},
    );
  }

  Future<void> _incrementCounter() async {
    setState(() {
      _counter++;
    });

    DocumentSnapshot doc = await userRef.get();
    if (doc.exists) {
      // update the existing document
      userRef.update({'counter': _counter});
    } else {
      // create a new document with set
      userRef.set({'counter': _counter});
    }
  }

  // cancel the stream subscription in dispose
  @override
  void dispose() {
    super.dispose();
    userSub.cancel();
  }

  @override
  Widget build(BuildContext context) {
    var theme = Theme.of(context);
    var colorScheme = theme.colorScheme;
    var style = theme.textTheme.displayMedium!.copyWith(
      color: theme.colorScheme.onPrimary,
    );
    final currentUser = FirebaseAuth.instance.currentUser;

    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      backgroundColor: colorScheme.surfaceVariant,
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // This is the current user's display name. only display it if the user is logged in.
            if (currentUser != null)
              Text(
                'Welcome, ${currentUser.uid}!',
              ),
            // space between the display name and the counter
            const SizedBox(height: 12),

            Card(
                color: theme.colorScheme.primary,
                child: Padding(
                    padding: const EdgeInsets.all(20),
                    child: AnimatedSize(
                      duration: const Duration(milliseconds: 200),
                      child: // theme.textTheme.displayMedium
                          Text(
                        '$_counter',
                        style: style.copyWith(fontWeight: FontWeight.w200),
                      ),
                    )))
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:faker/faker.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'models/friend.dart';

Future<void> populateDatabaseWithFakeFriends(User currentUser) async {
  final faker = Faker();
  final friendsCollection = FirebaseFirestore.instance
      .collection('users')
      .doc(currentUser.uid)
      .collection('friends');

  for (int i = 0; i < 10; i++) {
    final fakeFriend = Friend(
      id: faker.guid.guid(),
      name: faker.person.name(),
      profilePictureUrl: '',
      status: faker.lorem.sentence(),
    );

    await friendsCollection.doc(fakeFriend.id).set(fakeFriend.toMap());
  }
}

  Future<void> initializeUserData(User user, DocumentReference userRef) async {
    // Check if the document exists
    final docSnapshot = await userRef.get();
    if (!docSnapshot.exists) {
      // Initialize the user data
      await userRef.set({
        'id': user.uid,
      }, SetOptions(merge: true));

      await populateDatabaseWithFakeFriends(user);
    }
  }
import 'package:flutter/material.dart';

class ResponsiveNavigationLayout extends StatelessWidget {
  final int selectedIndex;
  final List<ResponsiveNavigationDestination> destinations;
  final ValueChanged<int> onItemSelected;

  const ResponsiveNavigationLayout({
    Key? key,
    required this.selectedIndex,
    required this.destinations,
    required this.onItemSelected,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final useNavigationBar = MediaQuery.of(context).size.width > 450;
    final isLargeScreen = MediaQuery.of(context).size.width > 600;

    var mainArea = destinations[selectedIndex].screen;

    return Scaffold(
        bottomNavigationBar: useNavigationBar
            ? null
            : NavigationBar(
                selectedIndex: selectedIndex,
                onDestinationSelected: onItemSelected,
                destinations: List.generate(
                  destinations.length,
                  (index) => NavigationDestination(
                    icon: destinations[index].icon,
                    selectedIcon: destinations[index].selectedIcon,
                    label: destinations[index].title,
                  ),
                ),
              ),
        body: SafeArea(
            child: useNavigationBar
                ? Row(
                    children: [
                      NavigationRail(
                        extended: isLargeScreen,
                        destinations: List.generate(
                          destinations.length,
                          (index) => NavigationRailDestination(
                            icon: destinations[index].icon,
                            selectedIcon: destinations[index].selectedIcon,
                            label: Text(destinations[index].title),
                          ),
                        ),
                        selectedIndex: selectedIndex,
                        onDestinationSelected: (value) {
                          onItemSelected(value);
                        },
                      ),
                      Expanded(
                        child: mainArea,
                      ),
                    ],
                  )
                : mainArea));
  }
}

class ResponsiveNavigationDestination {
  final String title;
  final Icon icon;
  final Icon selectedIcon;
  final Widget screen;

  const ResponsiveNavigationDestination ({
    required this.title,
    required this.icon,
    required this.selectedIcon,
    required this.screen,
  });
}

import 'package:flutter/material.dart';

class ScheduleWidget extends StatefulWidget {
  const ScheduleWidget({Key? key}) : super(key: key);

  @override
  State<ScheduleWidget> createState() => _ScheduleWidgetState();
}

class _ScheduleWidgetState extends State<ScheduleWidget> {
  @override
  Widget build(BuildContext context) {
    return Container();
  }
}
  

import 'package:bugle/account_button.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

import 'auth.dart';

class FloatingSearchBar extends StatefulWidget {
  final Widget child;

  const FloatingSearchBar({Key? key, required this.child}) : super(key: key);

  @override
  State<FloatingSearchBar> createState() => _FloatingSearchBarState();
}

class _FloatingSearchBarState extends State<FloatingSearchBar> {
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final ColorScheme themeColors = Theme.of(context).colorScheme;
    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: [
            // The rest of the app content goes here
            widget.child,
            // The floating search bar
            Positioned(
              top: 10.0,
              left: 16.0,
              right: 16.0,
              child: Material(
                shape: const StadiumBorder(),
                color: themeColors.secondaryContainer,
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                  child: Row(
                    children: [
                      // The menu button
                      Builder(
                        builder: (context) {
                          return IconButton(
                            icon: const Icon(Icons.menu),
                            onPressed: () {
                              // Open the drawer
                              Scaffold.of(context).openDrawer();
                            },
                          );
                        },
                      ),
                      // The search field
                      Expanded(
                        child: TextField(
                          controller: _controller,
                          decoration: const InputDecoration(
                            hintText: 'Search',
                            border: InputBorder.none,
                          ),
                          onSubmitted: (value) {
                            // Perform the search
                            if (kDebugMode) {
                              print('Searching for $value');
                            }
                          },
                        ),
                      ),
                      // The profile picture
                      const AccountButton(),
                    ],
                  ),
                ),
              ),
            ), // end searchbar
          ],
        ),
      ),
      drawer: NavigationDrawer(
        children: [
          // The drawer content goes here
          ListTile(
            title: const Text('Home'),
            leading: const Icon(Icons.home),
            onTap: () {
              // Navigate to home screen
              Navigator.pop(context);
            },
          ),
          ListTile(
            title: const Text('Settings'),
            leading: const Icon(Icons.settings),
            onTap: () {
              // Navigate to settings screen
              Navigator.pop(context);
              Authentication().showSignOutDialog(context);
            },
          ),
          ListTile(
            title: const Text('Anonymous'),
            leading: const Icon(Icons.login),
            onTap: () {
              Authentication().signInAnonymously();
              Navigator.pop(context);
            },
          ),
          // delete account
          ListTile(
            title: const Text('Delete Account'),
            leading: const Icon(Icons.delete),
            onTap: () {
              Authentication().deleteUser();
              Navigator.pop(context);
            },
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Perform some action
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

class Friend {
  final String id;
  final String name;
  final String profilePictureUrl;
  final String status;

  Friend({required this.id, required this.name, required this.profilePictureUrl, required this.status});

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'profilePictureUrl': profilePictureUrl,
      'status': status,
    };
  }

  factory Friend.fromMap(Map<String, dynamic> map) {
    return Friend(
      id: map['id'],
      name: map['name'],
      profilePictureUrl: map['profilePictureUrl'],
      status: map['status'],
    );
  }
}